// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id          String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @default("New File")
  awskey      String       @unique
  contentType String
  status      RecordStatus @default(ACTIVE)

  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String  @db.Uuid
  Label   Label[]

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@index([ownerId])
  @@map("file")
}

model Label {
  id     String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  name   String @default("New Label")
  color  String @default("rgba(19, 255, 0, 1)")
  File   File[]

  @@map("label")
}

enum RecordStatus {
  ACTIVE
  DELETED
}

model User {
  id                  String                @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password            String
  email               String                @unique
  username            String                @default("Annonymous")
  email_verified      Boolean?              @default(false)
  file                File[]
  status              RecordStatus?         @default(ACTIVE)
  notificationSession NotificationSession[]

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("user")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model NotificationSession {
  id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  notifications Notification[]

  @@map("notification_sessions")
}

model Notification {
  id String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  type String
  data String

  notification_session    NotificationSession @relation(fields: [notification_session_id], references: [id])
  notification_session_id String              @db.Uuid

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("notifications")
}
